# -*- coding: utf-8 -*-
"""Project_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ixOlYeZptoXd8Ll_Sa7qJa3oKsStjol0

## **COVID-19 DATASET**

## **PANDAS**
"""

import pandas as pd
df = pd.read_csv("04-01-2021.csv")
df

"""## **Commands**"""

df.head()

df.tail()

df.shape

df.columns

df.dtypes

df.sample()

df.sample(n = 2)

"""## **Operations on data frame**"""

df['Country_Region']

df[['Country_Region','Deaths']]

df.loc[0]

df[df['Deaths'] > 1000]

df[['Country_Region','Confirmed','Deaths','Recovered']][df['Deaths'] > 1000]

df.drop(columns = ['Lat'])

"""## **Check null values**"""

df.isnull()

df.isnull().sum()

df.isnull().values.any()

"""## **Pandas Functions**"""

df.index

df.index.tolist()

df.set_index('Country_Region')

df.reset_index()

df = df.drop(index=1)
df

df.columns.tolist()

df.rename(columns = {'Country_Region':'Country'},inplace = True)
df

df.loc[[2,4]]

df.loc[3:5]

print(df.loc[5,'Recovered'])

df.loc[[4,5],['Country','Deaths']]

df.iloc[4:6,4:6]

"""## **Handling Missing Data**"""

for col in df.columns:
    df[col] = df[col].fillna(df[col].mode()[0])
df

"""## **Removing Duplicates**"""

df.duplicated()

df[df.duplicated()]

df[df.duplicated(subset=["Country"])]

df.drop_duplicates(inplace=True)
df

df = df.reset_index(drop=True)
df

print(df.duplicated().sum())

print(df.duplicated(subset=['Country']).sum())

"""## **Descriptive Statistics**"""

df.describe()

df.info()

df.count()

df.nunique()

df.value_counts()

"""## **Data Sorting**"""

df.sort_values(by='Incident_Rate')

df.sort_values(by=['Incident_Rate', 'Case_Fatality_Ratio'], ascending=[True, False])

df.sort_values(by='Recovered', ascending=False)

df.sort_index(ascending=True)

"""## **Data Filtering**"""

df[(df['Deaths'] < 500) & (df['Recovered'] > 1000)]

df[df['Country'].str.contains('Australia')]

df[df['Province_State'].str.startswith('Northern')]

"""## **Grouping and Aggregation**"""

df.groupby('Country')['Incident_Rate'].sum()

df.groupby('Country')['Deaths'].agg(['sum', 'mean', 'max'])

df.groupby(['Province_State', 'Country'])['Case_Fatality_Ratio'].sum()

df.groupby('Country')['Confirmed'].mean()

df.groupby('Combined_Key')['Deaths'].max()

df.groupby('Country').size()

df.groupby('Country')['Incident_Rate'].sum().sort_values(ascending=False)

df.groupby(['Country','Province_State'])['Case_Fatality_Ratio'].sum().sort_values(ascending=False)

"""## **MATPLOTLIB**

Line Graph - Case Fatality Ratio of Top 10 Countries
"""

import matplotlib.pyplot as plt
top10_confirmed = df.sort_values(by='Confirmed', ascending=False).head(10)
plt.figure(figsize=(8,5))
plt.plot(top10_confirmed['Country'], top10_confirmed['Case_Fatality_Ratio'],marker = "o",color = "red")
plt.title("Case Fatality Ratio of Top 10 Countries")
plt.xlabel("Country")
plt.ylabel("Case Fatality Ratio")
plt.xticks(rotation = 45)
plt.grid(True)
plt.show()

"""Bar Graph - Top 10 Countries by Confirmed Cases"""

top10_confirmed = df.sort_values(by='Confirmed', ascending=False).head(10)
plt.figure(figsize=(8,5))
plt.bar(top10_confirmed['Country'], top10_confirmed['Confirmed'],color = "purple")
plt.title("Top 10 Countries by Confirmed Cases")
plt.xlabel("Country")
plt.ylabel("Confirmed Cases")
plt.xticks(rotation = 45)
plt.grid(True)
plt.show()

"""Pie Chart - Confirmed,Deaths,Recovered and Active Cases"""

total_confirmed = df['Confirmed'].sum()
total_deaths = df['Deaths'].sum()
total_recovered = df['Recovered'].sum()
total_active = df['Active'].sum()
labels = ['Confirmed', 'Deaths','Recovered','Active']
sizes = [total_confirmed, total_deaths,total_recovered,total_active]
colors = ['skyblue', 'pink',"lightgreen","orange"]
plt.figure(figsize=(8,6))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
plt.title("Global Distribution: Confirmed, Deaths, Recovered and Active Cases")
plt.show()

"""Donut Chart - Top 5 Countries by Deaths"""

top5_deaths = df.sort_values(by='Deaths', ascending=False).head(5)
plt.pie(top5_deaths['Deaths'],labels = top5_deaths['Country'],autopct='%1.1f%%',startangle=90)
plt.gca().add_artist(plt.Circle((0,0), 0.4, color ='white'))
plt.title("Top 5 Countries by Deaths")
plt.show()

"""Histogram - Incident Rate Distribution"""

plt.figure(figsize=(8,5))
plt.hist(df['Incident_Rate'], bins = 20, color='orange',edgecolor = 'black')
plt.title("Incident Rate Distribution")
plt.xlabel("Incident Rate")
plt.ylabel("Frequency")
plt.show()

"""Scatter Plot - Confirmed vs Deaths"""

plt.figure(figsize=(8,5))
plt.scatter(df['Confirmed'], df['Deaths'], color='purple', alpha=0.6)
plt.title("Confirmed vs Deaths")
plt.xlabel("Confirmed Cases")
plt.ylabel("Deaths")
plt.grid(True)
plt.show()

"""Box Plot - COVID-19 Cases"""

plt.figure(figsize=(8,5))
plt.boxplot([df['Confirmed'], df['Deaths'], df['Recovered'],df['Active']], labels=['Confirmed', 'Deaths', 'Recovered','Active'])
plt.title("COVID-19 Cases")
plt.ylabel("Number of Cases")
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""## **SEABORN**

Line Plot - Case Fatality Ratio of Top 10 Countries
"""

import matplotlib.pyplot as plt
import seaborn as sns
top10_confirmed = df.sort_values(by='Confirmed', ascending=False).head(10)
plt.figure(figsize=(8,5))
sns.lineplot(x = top10_confirmed['Country'], y = top10_confirmed['Case_Fatality_Ratio'],marker = "o",color = "red")
plt.title("Case Fatality Ratio of Top 10 Countries")
plt.xlabel("Country")
plt.ylabel("Case Fatality Ratio")
plt.xticks(rotation = 45)
plt.grid(True)
plt.show()

"""Bar Plot - Top 10 Countries by Confirmed Cases"""

top10_confirmed = df.sort_values(by='Confirmed', ascending=False).head(10)
plt.figure(figsize=(8,5))
sns.barplot(x = top10_confirmed['Country'], y = top10_confirmed['Confirmed'],color = "purple")
plt.title("Top 10 Countries by Confirmed Cases")
plt.xlabel("Country")
plt.ylabel("Confirmed Cases")
plt.xticks(rotation = 45)
plt.grid(True)
plt.show()

"""Scatter Plot - Confirmed vs Deaths"""

plt.figure(figsize=(8,5))
sns.scatterplot(x = df['Confirmed'], y = df['Deaths'], color='purple', alpha=0.6)
plt.title("Confirmed vs Deaths")
plt.xlabel("Confirmed Cases")
plt.ylabel("Deaths")
plt.grid(True)
plt.show()

"""Histplot - Incident Rate Distribution"""

plt.figure(figsize=(8,5))
sns.histplot(x = df['Incident_Rate'], bins = 20, color='orange',edgecolor = 'black')
plt.title("Incident Rate Distribution")
plt.xlabel("Incident Rate")
plt.ylabel("Frequency")
plt.show()

"""Count Plot"""

plt.figure(figsize=(10,5))
df = df.head(10)
sns.countplot(x = 'Country',data = df,color = "purple")
plt.title("Country Distribution")
plt.xlabel("Country")
plt.ylabel("Count")
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""Box Plot - COVID-19 Cases"""

plt.figure(figsize=(8, 5))
sns.boxplot(data=df)
plt.title("COVID-19 Cases")
plt.ylabel("Number of Cases")
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""Violin Plot - COVID-19 CASES"""

plt.figure(figsize=(8, 5))
sns.violinplot(data=df)
plt.title("COVID-19 Cases")
plt.ylabel("Number of Cases")
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""Cat Plot -"""

top5_confirmed = df.sort_values(by='Confirmed',ascending=False).head(5)
sns.catplot(x='Country', y='Confirmed',data=top5_confirmed)
plt.title("Top 5 Countries by Confirmed Cases")
plt.xlabel("Country")
plt.ylabel("Confirmed Cases")
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""Heat Map -"""

sns.heatmap(df.select_dtypes(include=['number']).corr(), annot=True, cmap = 'coolwarm')
plt.show()

"""Pair Plot -"""

sns.pairplot(df.select_dtypes(include=['number']))
plt.show()